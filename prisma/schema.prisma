// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToBillboard")
  sizes     Size[] @relation("StoreToSize")
  colors    Color[] @relation("StoreToColor")
  products  Product[] @relation("StoreToSize")

  orders    Order[] @relation("StoreToOrder")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categories Category[] 

  @@index([storeId])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  billboards Billboard @relation(fields: [billboardId], references: [id])
  billboardId String
  products  Product[] @relation("CategoryToProduct")


  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id       String   @id @default(uuid())
  storeId  String
  store    Store    @relation("StoreToSize", fields: [storeId], references: [id])
  name     String
  value    String

  
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String   // Hex code, e.g., #FFFFFF
  
  products Product[] 


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


// each product can have several sizes, colors just like images but one category 
model Product {
  id        String   @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  

  storeId   String
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id])
  
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  
  sizes     Size[]
  colors    Color[]

  images     Image[]

  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  
  orderItems OrderItem[]

  

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  isPaid    Boolean     @default(false)
  orderItems OrderItem[]
  phone     String
  address   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}